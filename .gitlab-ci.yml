# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

variables:
  DEPLOY_KEY: $deploy_key
  SSH_PORT: 22
  URL: $url_server
  REMOTE_FOLDER: $remote_folder
  DEPLOY_USER: $deploy_user
  
  # JKU Proxy settings
  LC_ALL: en_US.UTF-8
  PROXY_PORT: 3128
  http_proxy: http://140.78.3.1
  https_proxy: http://140.78.3.1
  HTTP_PROXY: http://140.78.3.1
  HTTPS_PROXY: http://140.78.3.1
  no_proxy: .jku.at,.im.intern,140.78.,127.,172.17.,172.18.,localhost,gitti.im.intern,artifactory.im.jku.at,sourcery.im.jku.at
  NO_PROXY: .jku.at,.im.intern,140.78.,127.,172.17.,172.18.,localhost,gitti.im.intern,artifactory.im.jku.at,sourcery.im.jku.at
  
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -DproxySet=true -Dhttp.proxyHost=$HTTP_PROXY -Dhttp.proxyPort=$PROXY_PORT -Dhttp.nonProxyHosts=.jku.at,.im.intern,140.78.,127.,172.17.,172.18.,localhost,gitti.im.intern,artifactory.im.jku.at,sourcery.im.jku.a"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS_PROD: "clean package -Pproduction"
  

# This template uses jdk8 for verifying and deploying images
image: maven:3.8-jdk-11

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.build: &build
  stage: build
  script:
    - 'chmod +x mvnw'
    - './mvnw $MAVEN_OPTS $MAVEN_CLI_OPTS_PROD'
  except:
    variables:
      - $CI_COMMIT_BRANCH == 'main'

# Verify merge requests using JDK8
build:jdk11:
  <<: *build
  

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
deploy:jdk11:
  stage: deploy
  script:
    - 'chmod +x mvnw'
    - 'mvn $MAVEN_CLI_OPTS_PROD'
    - 'rsync -av --delete -e "ssh -i $DEPLOY_KEY" $DEPLOY_USER@$URL:$REMOTE_FOLDER target/travert.war'
    - 'ssh -i $DEPLOY_KEY $URL "sudo /usr/bin/systemctl restart apache2"'
    - 'ssh -i $DEPLOY_KEY $URL "sudo /usr/bin/systemctl restart tomcat9"'
  only:
    variables:
      - $CI_COMMIT_BRANCH == 'main'
